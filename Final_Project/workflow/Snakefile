from pathlib import Path
import pandas as pd

configfile: Path("config") / "config.yaml"

# ------------------------------------------------------------------ #
#             functions for input/output determination               #
# ------------------------------------------------------------------ #

# use trimmed reads if available (decontamination input)
def fq_trimmed_input(wildcards):
    if config['skip_trimming_Illumina']:
        return samples.loc[wildcards.sample, :]
    return [result_dir / "trimmed" / f"{wildcards.sample}_1P.fq.gz", result_dir / "trimmed" / f"{wildcards.sample}_2P.fq.gz"]

# returns fastq files that went through the most preprocessing
# use normalized, filtered (decontaminated) and/or trimmed reads if available
# (genome assembly input)
def fq_assembly_input(wildcards):
    if config['skip_coverage_normalization']:
        if skip_decontamination:
            if config['skip_trimming_Illumina']:
                return samples.loc[wildcards.sample, :]
            return [result_dir / "trimmed" / f"{wildcards.sample}_1P.fq.gz", result_dir / "trimmed" / f"{wildcards.sample}_2P.fq.gz"]
        return [result_dir / "filtered_fastq" / f"{wildcards.sample}_1.fastq.gz", result_dir / "filtered_fastq" / f"{wildcards.sample}_2.fastq.gz"]
    return [result_dir / "normalization" / f"{wildcards.sample}_norm_1.fastq.gz", result_dir / "normalization" / f"{wildcards.sample}_norm_2.fastq.gz"]

# returns trimmed ONT reads if available
# or nothing if ONT correction is disabled
# (genome assembly input)
def ONT_assembly_input(wildcards):
    if not ONT_correction:
        return
    
    if config['skip_trimming_ONT']:
        return samples.at[wildcards.sample, "ONT"]
    return result_dir / "trimmed_ONT" / f"{wildcards.sample}_ONT_trimmed.fastq.gz"

# same as 'fq_assembly_input', but returns 'None' if all preprocessing is skipped
# (fastQC input post-preprocessing)
def fq_preproccessed(wildcards):
    if config['skip_coverage_normalization']:
        if skip_decontamination:
            if config['skip_trimming_Illumina']:
                return
            return result_dir / "trimmed" / f"{wildcards.sample}_{wildcards.i}P.fq.gz"
        return result_dir / "filtered_fastq" / f"{wildcards.sample}_{wildcards.i}.fastq.gz"
    return result_dir / "normalization" / f"{wildcards.sample}_norm_{wildcards.i}.fastq.gz"

# determines expected files from fastQC execution
def determine_fastqc_exe():
    if config['skip_fastQC']:
        return
    
    expected_files = [expand(result_dir / "qc_files" / "preprocessing" / "qc_raw" / "{sample}_{i}.html", i=[1,2], sample=list(samples.index)),
                      expand(result_dir / "qc_files" / "preprocessing" / "qc_raw" / "{sample}_{i}_fastqc.zip", i=[1,2], sample=list(samples.index))]
    
    if config['skip_trimming_Illumina'] and skip_decontamination and config['skip_coverage_normalization']:
        return expected_files

    return expected_files + [expand(result_dir / "qc_files" / "preprocessing" / "qc_prep" / "{sample}_{i}.html", i=[1,2], sample=list(samples.index)),
                             expand(result_dir / "qc_files" / "preprocessing" / "qc_prep" / "{sample}_{i}_fastqc.zip", i=[1,2], sample=list(samples.index))]

# determines expected files from nanoplot execution                        
def determine_nanoplot_exe():
    if config['skip_nanoplot']:
        return

    expected_files = expand(result_dir / "qc_files" / "preprocessing" / "nanoplot" / "{sample}_raw_NanoStats.txt", sample=list(samples.index))

    if config['skip_trimming_ONT']:
        return expected_files

    return expected_files + [expand(result_dir / "qc_files" / "preprocessing" / "nanoplot" / "{sample}_prep_NanoStats.txt", sample=list(samples.index))]

# determines expected files from MLST execution
def determine_mlst_exe():
    if config['skip_MLST']:
        return
    return result_dir / "db_screening" / "mlst_summary.tsv"

# determines expected files from database screening (CARD, VFDB, PlasmidFinder)
def determine_db_screening_exe():
    expected_files = []

    if not config['skip_CARD']:
        expected_files = expected_files + [result_dir / "db_screening" / "abricate" / "card.tsv"]
    
    if not config['skip_VFDB']:
        expected_files = expected_files + [result_dir / "db_screening" / "abricate" / "vfdb.tsv"]

    if not config['skip_PlasmidFinder']:
        expected_files = expected_files + [result_dir / "db_screening" / "abricate" / "plasmidfinder.tsv"]

    return expected_files

# ------------------------------------------------------------------ #
#                           script start                             #
# ------------------------------------------------------------------ #

# read some config settings
sample_files = Path(config["samples"])
result_dir = Path(config["results"])
adapter_seqs = Path(config["adapter"])

if not Path(adapter_seqs).is_file():
    adapter_seqs = Path("resources/all_adapter_seqs.fa")

# construct RAxML model string
raxml_model = "GTR" + config['RAxML']['model']

if config['RAxML']['iv_sites']:
    raxml_model = raxml_model + "I"
elif config['RAxML']['ASC']:
    raxml_model = "ASC_" + raxml_model

if config['RAxML']['ML_freq']:
    raxml_model = raxml_model + "X"

# read file containing sample paths
samples = pd.read_csv(sample_files, index_col ="sample", sep='\t')

# disable ONT correction if no ONT files are given
ONT_correction = config['ONT_correction']
if not "ONT" in list(samples.columns):
    ONT_correction = False

# skip decontamination if no contamination database was given
skip_decontamination = config['skip_decontamination']
if config['contamination_db'] == "":
    skip_decontamination = True

# ------------------------------------------------------------------ #
#                               rules                                #
# ------------------------------------------------------------------ #

rule all:
    input:
        result_dir / "qc_files" / "preprocessing" / "final_qc_report.html",
        result_dir / "qc_files" / "assembly" / "report.html",
        result_dir / "core_genome_phylogeny" / "RAxML_bestTree.png",
        determine_mlst_exe(),
        result_dir / "db_screening" / "abricate_summary.tsv" if len([determine_db_screening_exe()]) <= 1 else []

include: Path("rules") / "taxonomic_screening.smk"

include: Path("rules") / "preprocessing.smk"

include: Path("rules") / "assembly.smk"

include: Path("rules") / "phylo.smk"

include: Path("rules") / "db_screening.smk"