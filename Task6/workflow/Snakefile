from pathlib import Path
import pandas as pd

configfile: Path("config") / "config.yaml"

# ------------------------------------------------------------------ #
#             functions for input/output determination               #
# ------------------------------------------------------------------ #

def determine_qualimap_exe():
    if config['skip_qualimap']:
        return []
    return expand(result_dir / "qc_files" / "qualimap" / "{sample}" / "qualimapReport.html", sample=list(samples.index))

def determine_fastqc_exe():
    if config['skip_fastQC']:
        return []
    
    expected_files = [expand(result_dir / "qc_files" / "qc_raw" / "{sample}_{i}.html", i=[1,2], sample=list(samples.index)),
                      expand(result_dir / "qc_files" / "qc_raw" / "{sample}_{i}_fastqc.zip", i=[1,2], sample=list(samples.index))]
    
    if config['skip_trimming']:
        return expected_files

    return expected_files + [expand(result_dir / "qc_files" / "qc_trimmed" / "{sample}_{j}P.html", j=[1,2], sample=list(samples.index)),
                             expand(result_dir / "qc_files" / "qc_trimmed" / "{sample}_{j}P_fastqc.zip", j=[1,2], sample=list(samples.index))]

def determine_assembly_route():
    expected_files = []
    
    if config['denovo_assembly']:
        expected_files += expand(result_dir / "denovo" / "quant_results" / "{sample}", sample=list(samples.index))
    
    if config['reference_assembly']:
        expected_files += expand(result_dir / "denovo" / "gene_expression" / "{sample}.genes.results", sample=list(samples.index))
    
    return expected_files

def determine_trimming_exe():
    if config['skip_trimming']:
        return []
    return expand(result_dir / "trimmed" / "{sample}_{j}P.fq.gz", j=[1,2], sample=list(samples.index))

def fq_trimmed_input(wildcards):
    if config['skip_trimming']:
        return []
    return result_dir / "trimmed" / f"{wildcards.sample}_{wildcards.j}P.fq.gz"

# returns all fq1 files if 'left' is True, all fq2 files else
def fq_denovo_input(left):
    if config['skip_trimming']:
        return list(samples.loc[:, "fq1"]) if left else list(samples.loc[:, "fq2"])
    if left:
        return expand(result_dir / "trimmed" / "{sample}_1P.fq.gz", sample=list(samples.index))
    return expand(result_dir / "trimmed" / "{sample}_2P.fq.gz", sample=list(samples.index))

# returns sample pair of fq files (trimmed if trimming was executed)
def fq_assembly_input(wildcards):
    if config['skip_trimming']:
        return samples.loc[wildcards.sample, :]
    return [result_dir / "trimmed" / f"{wildcards.sample}_1P.fq.gz", result_dir / "trimmed" / f"{wildcards.sample}_2P.fq.gz"]

# ------------------------------------------------------------------ #
#                           script start                             #
# ------------------------------------------------------------------ #

# read config settings
sample_files = Path(config["samples"])
reference = Path(config["reference"])
ref_annotation = Path(config["reference_annotation"])
result_dir = Path(config["results"])
adapter_seqs = Path(config["adapter"])

# read file containing sample paths
samples = pd.read_csv(sample_files, index_col ="sample", sep='\t')

rule all:
    input:
        result_dir / "qc_files" / "final_qc_report.html",
        expand(result_dir / "ref_mapping" / "transcripts" / "{sample}.gft", sample=list(samples.index)),
        determine_assembly_route(),
        determine_trimming_exe()



# ------------------------------------------------------------------ #
#                               rules                                #
# ------------------------------------------------------------------ #

include: Path("rules") / "qc.smk"

include: Path("rules") / "ref_mapping.smk"

include: Path("rules") / "denovo.smk"

include: Path("rules") / "kallisto.smk"

include: Path("rules") / "rsem.smk"